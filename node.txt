#########utility
getParamNames：获取方法参数名
setImmediate：polyfill
try：优化版try...catch
dig：对arguments的reduce
argumentsToArray：toArray
base64encode：加密方式
base64decode
md5
sha1
sha256
hmac
isSafeNumberString：安全数字（Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1）
toSafeNumber：
random：范围随机数
randomString：随机字符串
splitAlwaysOptimized：string split to array
replaceInvalidHttpHeaderChar：根据unicode编码表，判断http请求头字符
includesInvalidHttpHeaderChar
randomSlice：随机截取一定长度的数组元素
spliceOne：去除array中一个元素
accessLogDate：输出16/Apr/2013:16:40:09 +0800日期格式
logDate：输出YYYY-MM-DD HH:mm:ss.SSS日期格式
YYYYMMDDHHmmss
YYYYMMDD
datestruct
timestamp
map：生成纯洁obj
encodeURIComponent
decodeURIComponent







#########co
co(fn*).then( val => )
var fn = co.wrap(fn*)
例1：
const say = () => {
  return new Promise((res, rej) => {
    res('say');
  });
};

const hello = (pre) => {
  return new Promise((res, rej) => {
    res(`${pre} hello`);
  });
};

const world = (pre) => {
  return new Promise((res, rej) => {
    res(`${pre} world`);
  });
};

co(function* () {
  var _say = yield say();
  var _sayHello = yield hello(_say);
  var _sayHelloWorld = yield world(_sayHello);

  console.log(_sayHelloWorld);
});







#########http
例1：
http.createServer(function(req,res){
    res.writeHead(200,{
        "content-type":"text/plain"
    });
    res.write("hello nodejs");
    res.end();
}).listen(3001, () => {
  console.log('start');
});

#http.js
function createServer () {
  return new Server(arguments);
};

#_http_server.js
const common = require('_http_common');
const parsers = common.parsers;

function Server (requestListener) {
  var parser = parsers.alloc();
  net.Server.call(this);
  ...
  this.on('request', requestListener);
  this.on('connection', function (socket) {
    socket.on('timeout', socketOnTimeout);
    socket.on('error', socketOnError);
    ...
    parser.onIncoming = function () {
      ...
      this.on('finish', finishFunc);
      this.emit('request', req, res);
    }
  });
};

#net.js
function Server () {
  EventEmitter.call(this);
};

Server.prototype.listen = function () {
  ...
  listenInCluster ();
  
};

function listenInCluster (server, address, port, addressType,
                     backlog, fd, exclusive) {
  server._listen2(address, port, addressType,
                         backlog, fd, exclusive);
};

Server.prototype._listen2 = function (address, port, addressType, backlog, fd) {
  this._handle.onconnection = function (error) {
    if (error) {
      this.emit('error');
    }

    else {
      this.emit('connection', socket);
    }
  };
};

#events.js
function EventEmitter () {
  
};

EventEmitter.prototype.on = function () {
  ...
};

EventEmitter.prototype.emit = function () {
  ...
};






#########koa
#koa
__proto__
  listen(...args)
    http.createServer(this.callback()).listen(...args);
  toJSON
  inspect
  use(fn)
    if (isGenerator(fn)) {
      warn('deprecate')
    }

    else {
      this.middleware.push(fn);
    }
  callback()
    const fn = compose(this.middleware);
    return (req, res) => {
      this.ctx = this.createContext(req, res);
      const handleRes = () => respond(this.ctx);
      const handleErr = err => this.ctx.onerror(err);
      fn(this.ctx).then(handleRes).catch(handleErr);
    };
  createContext(req, res)
    const ctx = Object.create(context);
    ctx.response = Object.create(this.response);
    ctx.request = Object.create(this.request);
    ctx.res = res;
    ctx.req = res;
    return ctx;
  onerror
__fn__
  respond(ctx)
    const body = ctx.body;
    if (isString(body) || ...) {
      res.end(body);
    }

#koa-router
例：
const router = require('koa-router')();
router.get('/', list)
  .get('/post/new', add)
  .get('/post/:id', show)
  .post('/post', create);
app.use(router.routes());

实现
__proto__
  get
  post
    this.stack.push(new Layer(method, path, middleware));
  use
    function () {
      return function dispatch (ctx, next) {
        const memo = [];
        this.stack.forEach(() => {
          ...
          memo.push(...);
        });

        return compose(memo)(ctx, next);
      };
    };

#koa-view
例：
const views = require('koa-views');
const path = require('path');
views(path.join(__dirname, '/../views'), {
  map: { html: 'swig' }
});

实现
function viewsMiddleware (path, opts) {
  const renderEngine = engines[opts.html];
  return function (ctx, next) {
    if (ctx.render) return;

    ctx.render = function (realpath, params) {
      ...
      return renderEngine(getFile(path, realpath), params)
        .then((html) => {
          ctx.body = html;
        });
    };

  };
};

#koa-body
例：
const koaBody = require('koa-body');
app.use(koaBody());

实现
function requestbody (opts) {
  return function (ctx, next) {
    if (ctx.is('json')) {
      ...
    } else if (ctx.is('urlencoded')) {
      ...
    } else if (ctx.is('text')) {
      ...
    } else if (ctx.is('multipart')) {
      ...
    }
  };
}

#koa-compose
function compose (middleware) {
  ...
  const length = middleware.length;
  return (ctx, next) => {
    const dispatch = (index) => {
      const fn = middleware[index];

      if (index >= length) {
        return;
      }

      else {
        return Promise.resolve(fn(ctx, () => {
          return dispatch(index + 1);
        }));
      }
    };
    return dispatch(0);
  };
}












