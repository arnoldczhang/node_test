###utility
getParamNames：获取方法参数名
setImmediate：polyfill
try：优化版try...catch
dig：对arguments的reduce
argumentsToArray：toArray
base64encode：加密方式
base64decode
md5
sha1
sha256
hmac
isSafeNumberString：安全数字（Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1）
toSafeNumber：
random：范围随机数
randomString：随机字符串
splitAlwaysOptimized：string split to array
replaceInvalidHttpHeaderChar：根据unicode编码表，判断http请求头字符
includesInvalidHttpHeaderChar
randomSlice：随机截取一定长度的数组元素
spliceOne：去除array中一个元素
accessLogDate：输出16/Apr/2013:16:40:09 +0800日期格式
logDate：输出YYYY-MM-DD HH:mm:ss.SSS日期格式
YYYYMMDDHHmmss
YYYYMMDD
datestruct
timestamp
map：生成纯洁obj
encodeURIComponent
decodeURIComponent

###co
###http
http.createServer(function (req, res) {
  // TODO
});

#http.js
function createServer () {
  return new Server(arguments);
};

#_http_server.js
const common = require('_http_common');
const parsers = common.parsers;

function Server (requestListener) {
  var parser = parsers.alloc();
  net.Server.call(this);
  ...
  this.on('request', requestListener);
  this.on('connection', function (socket) {
    socket.on('timeout', socketOnTimeout);
    socket.on('error', socketOnError);
    ...
    parser.onIncoming = function () {
      ...
      this.on('finish', finishFunc);
      this.emit('request', req, res);
    }
  });
};

;

#net.js
function Server () {
  EventEmitter.call(this);
};

Server.prototype.listen = function () {
  ...
  listenInCluster ();
  
};

function listenInCluster (server, address, port, addressType,
                     backlog, fd, exclusive) {
  server._listen2(address, port, addressType,
                         backlog, fd, exclusive);
};

Server.prototype._listen2 = function (address, port, addressType, backlog, fd) {
  this._handle.onconnection = function (error) {
    if (error) {
      this.emit('error');
    }

    else {
      this.emit('connection', socket);
    }
  };
};

#events.js
function EventEmitter () {
  
};

EventEmitter.prototype.on = function () {
  ...
};

EventEmitter.prototype.emit = function () {
  ...
};

















